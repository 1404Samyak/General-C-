1)C++_Basics:
  Syntax:
    Function_Declaration: "return_type function_name(parameters) { /* code */ }"
    If_Else: |
      if (condition) {
        // code
      } else {
        // code
      }
    Loops:
      For: "for (int i = 0; i < n; i++)"
      While: "while (condition) { }"
      Do_While: "do { } while (condition);"

  Pointers_And_References:
    Pointer:
      Declaration: "int* p = &x;"
      Meaning: "'p' stores address of 'x'"
      Dereference: "*p gives value at the address"
    Reference:
      Declaration: "int& ref = x;"
      Meaning: "'ref' is another name for 'x', changes reflect both ways"

  Comparators:
    Custom_Sort_Vector:
      Code: |
        bool cmp(pair<int,int> a, pair<int,int> b) {
          return a.first > b.first; // descending
        }
        sort(vec.begin(), vec.end(), cmp);
      Use: "Custom sorting logic in STL algorithms"

  Vector:
    Declaration: "vector<int> v;"
    Common_Operations:
      Push_Back: "v.push_back(x);"
      Access: "v[i], v.at(i)"
      Size: "v.size()"
      Back: "v.back()"
      Front: "v.front()"
      Pop_Back: "v.pop_back();"
      Clear: "v.clear();"

  Stack:
    Header: "#include<stack>"
    Operations:
      Declaration: "stack<int> s;"
      Push: "s.push(x);"
      Pop: "s.pop();"
      Top: "s.top();"
      Size: "s.size();"
      Empty: "s.empty();"

  Queue:
    Header: "#include<queue>"
    Operations:
      Declaration: "queue<int> q;"
      Push: "q.push(x);"
      Pop: "q.pop();"
      Front: "q.front();"
      Back: "q.back();"
      Size: "q.size();"
      Empty: "q.empty();"

  Priority_Queue:
    Max_Heap: "priority_queue<int> pq;"
    Min_Heap: |
      priority_queue<int, vector<int>, greater<int>> pq;
    Custom_Comparator: |
      struct cmp {
        bool operator()(pair<int,int>& a, pair<int,int>& b) {
          return a.second > b.second;
        }
      };
      priority_queue<pair<int,int>, vector<pair<int,int>>, cmp> pq;

  Nested_Loops:
    Basic_Syntax: |
      for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
          // code using i, j
        }
      }
    Use_Cases:
      Matrix_Traversal: "For 2D matrix/grid problems"
      Subarray_Sum: |
        for(int i = 0; i < n; i++) {
          int sum = 0;
          for(int j = i; j < n; j++) {
            sum += arr[j];
            // process sum(i..j)
          }
        }
      Adjacency_Checking: |
        for(int u = 0; u < n; u++) {
          for(auto v : adj[u]) {
            // process edge u -> v
          }
        }
      Prefix_Sum_2D: |
        for(int i = 0; i < n; i++)
          for(int j = 0; j < m; j++)
            sum[i][j] = A[i][j] + sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1];

  Complex_Declarations:
    Adjacency_List:
      Undirected_Graph: "vector<vector<int>> adj(n);"
      Weighted_Graph: "vector<vector<pair<int,int>>> adj(n); // {v, wt}"
      3D_Adjacency: "vector<vector<vector<pair<int,int>>>> graph;"
    Vector_of_Pairs: "vector<pair<int,int>> vp;"
    Vector_of_Vector_of_Pairs: "vector<vector<pair<int,int>>> vvp;"
    Set_of_Pairs: "set<pair<int,int>> s;"
    Map:
      Frequency_Map: "map<int,int> freq;"
      Char_Map: "unordered_map<char,int> m;"

  Notes:
    STL_Usage:
      - "Always use pass-by-reference in loops: for(auto &x : vec)"
      - "Vectors are dynamic, arrays are static"
    Tips:
      - "Prefer vector over array for flexibility"
      - "Use nested loops for pairwise comparisons, prefix/suffix logic, grid traversal"

2)Check_Valid_Parentheses:
  Purpose: "Check if a given string of parentheses is valid (balanced and properly nested)."

  Functions:
    match:
      Signature: "bool match(char ch1, char ch2)"
      Purpose: "Checks if the two characters form a valid opening-closing bracket pair."
      Logic:
        - "'(' matches with ')'"
        - "'{' matches with '}'"
        - "'[' matches with ']'"
      Return: "true if the pair is valid, else false"

    checkValidString:
      Signature: "bool checkValidString(string s)"
      Purpose: "Check if the input string `s` has valid and balanced brackets using a stack."

      Steps:
        1. Initialize a stack:
          Code: "stack<char> st;"
          Reason: "To keep track of unmatched opening brackets"
        
        2. Loop through each character in the string:
          Loop: "for (int i = 0; i < n; i++)"

          Cases:
            - If current character is a closing bracket: ')', '}', or ']':
                Conditions:
                  - If stack is empty:
                      Meaning: "No opening bracket to match with this closing bracket"
                      Action: "return false"
                  - Else, check if top of stack matches:
                      Logic: "match(st.top(), s[i])"
                      If true: "Pop from stack (valid pair found)"
                      Else: "return false (mismatched brackets)"
            
            - Else: (opening bracket):
                Action: "Push it onto the stack"
                Reason: "To wait for its corresponding closing bracket later"

        3. Final Stack Check:
          Code: "return st.empty();"
          Meaning: 
            -After the for loop is processed fully there is chance opening brackets may be left,for sure Only opening brackets are possible to be leftbehind not closing brackets because all closing brackets we are processig inside the for loop only.So if any opening brackets are left then also retur false,else return true
            - "If stack is empty: All brackets matched properly → return true"
            - "If stack is not empty: Some opening brackets were not closed → return false"

  Example_Run:
    Input: "({[]})"
    Stack_Trace:
      - Push '('
      - Push '{'
      - Push '['
      - Match '[' and ']' → pop
      - Match '{' and '}' → pop
      - Match '(' and ')' → pop
    Final_Stack: "empty → return true"

  Edge_Cases:
    - Input: "([)]"
      Explanation: "Although brackets are balanced in number, nesting is invalid → return false"
    - Input: "(()"
      Explanation: "Missing closing bracket for one opening → return false"
    - Input: "" (empty string)
      Explanation: "Technically balanced → return true"

  Notes:
    - Time_Complexity: "O(n)"
    - Space_Complexity: "O(n) in worst case (all openings)"
    - Only works for '(', ')', '{', '}', '[', ']' — doesn't support wildcards like '*'

  Optional_Extensions:
    - Support wildcard '*' as either '(' or ')' or empty (like in Leetcode problem)
    - Count total matched pairs
    - Return position of error for debugging

3)Valid_Parenthesis_With_Star:
  Problem:
    Statement: |
      Check whether a given string with characters '(', ')', and '*' is valid.
      '*' can represent either '(', ')' or an empty string.
    Goal: |
      Return true if the string can be interpreted as a valid sequence of parentheses.

  Core_Logic:
    Stacks_Used:
      open:
        Description: "Stores indices of unmatched '(' characters"
      star:
        Description: "Stores indices of '*' characters (can act as '(', ')' or empty)"
    
    Main_Loop:
      Iterate_Over_String:
        Code: |
          for (int i = 0; i < n; i++) {
              if (s[i] == '(') open.push(i);
              else if (s[i] == '*') star.push(i);
              else {
                  if (!open.empty()) open.pop();
                  else if (!star.empty()) star.pop();
                  else return false;
              }
          }
        Purpose:
          - Push index of '(' to open stack
          - Push index of '*' to star stack
          - When ')' is encountered:
              - First try to match with a previous '('
              - Else use '*' as '('
              - Else return false (no matching opening)
    
    Post_Loop_Compensation:
      Why_Needed: |
        After the loop, unmatched '(' may still remain in the open stack.
        These need to be matched using '*' treated as ')'.
        But only if '*' appeared **after** the '(' in the string.
      Code: |
        while (!open.empty() && !star.empty()) {
            if (open.top() > star.top()) return false;
            open.pop();
            star.pop();
        }
      Reasoning:
        - '(' at a later index than '*' means '*' appeared too early to act as ')'
        - So such combinations are invalid

    Final_Return:
      Code: |
        return open.empty();
      Meaning:
        - If all '(' were matched (directly or via '*'), return true
        - If any unmatched '(', return false

  Dry_Run_Example:
    Input: "(*))"
    Stack_States:
      Step_1: '(' at 0 → open = [0]
      Step_2: '*' at 1 → star = [1]
      Step_3: ')' at 2 → match with '(' → open.pop()
      Step_4: ')' at 3 → no '(', match with '*' → star.pop()
    Final: both stacks empty → ✅ valid

    Input: "*)("
    Stack_States:
      Step_1: '*' at 0 → star = [0]
      Step_2: ')' at 1 → no '(', match with '*' → star.pop()
      Step_3: '(' at 2 → open = [2]
    Final: open = [2], star = [] → ❌ invalid

  Time_Complexity: "O(n)"
  Space_Complexity: "O(n)"
  Constraints:
    - Only supports '(', ')', and '*'
    - Does not support '{' or '[' types of brackets

  Notes:
    - Clever use of indices allows enforcing correct ordering
    - The problem is based on Leetcode 678: Valid Parenthesis String
    - This greedy two-stack method is more efficient than backtracking all '*' cases

4)problem: Maximum Number of Non-Overlapping Meetings

constraints:
  - You are given two arrays: start[i], end[i] of size n
  - You must select the maximum number of meetings such that:
    - No two selected meetings overlap
    - The start time of a meeting must be strictly greater than the end time of the last selected meeting

solution_type: Greedy Algorithm

key_observation:
  - To schedule the maximum number of non-overlapping meetings, you should always choose the meeting that ends the earliest
  - This leaves the most room for future meetings

why_sort_by_end_time:
  - If you sort by end time, you always consider the meeting that finishes earliest first
  - This minimizes the time blocked by the current meeting
  - It ensures you leave space for as many future meetings as possible
  - This is optimal because picking a later-ending meeting might block a lot of shorter earlier-starting meetings

comparator_used:
  syntax: |
    sort(v.begin(), v.end(), [](pair<int, int>& p1, pair<int, int>& p2) {
        return p1.second <= p2.second;
    });

  explanation:
    - For two pairs p1 and p2 representing (start, end) of meetings:
      - If p1.second < p2.second → p1 comes before p2 ✅
      - If p1.second == p2.second → p1 comes before p2 (allowed because <= is true)
      - No explicit tie-breaking is used, but it doesn't matter for greedy correctness
    - This sort places meetings with the earliest end times at the front
    - Even if some meetings have the same end time, any one of them is safe to consider first

greedy_selection:
  - Initialize endtime = -infinity (or 0)
  - Traverse the sorted meetings
  - For each meeting:
      if start > endtime:
        - select the meeting
        - update endtime = current meeting's end
  - This ensures strictly non-overlapping selection

correctness_reasoning:
  - Greedy always picks the next meeting that ends the soonest
  - Once picked, no earlier-ending meeting could have been selected (because you already processed them)
  - By always choosing the best local (earliest ending) option, the global (maximum count) is achieved
  - This has been proven correct for the interval scheduling maximization problem

time_complexity:
  sorting: O(n log n)
  greedy_selection: O(n)
  total: O(n log n)

space_complexity: O(n) due to pair storage, O(1) if in-place sorting used

note:
  - If problem allows start == end, use '>='
  - If problem requires strict non-overlap (start > end), use '>'

5)problem: Merge Overlapping Intervals

description: |
  Given a list of intervals where each interval is a pair [start, end],
  merge all overlapping intervals and return a list of non-overlapping intervals
  that cover all the input intervals.

approach: Greedy Merge

sorting_step:
  reason: |
    To easily detect overlapping intervals, we must process them in order of their start times.
    Sorting by start time ensures all overlapping intervals are adjacent in the list.
  code_snippet: |
    sort(intervals.begin(), intervals.end());

variables:
  - n: number of intervals
  - ans: list to store the merged, non-overlapping intervals

main_loop:
  iteration: for each interval in intervals
  logic:
    - if ans is empty:
        - this is the first interval, add it to ans
    - else if current interval does NOT overlap with last interval in ans:
        - check: interval[0] > ans.back()[1]
        - reasoning: if current start > last end, no overlap exists
        - action: push current interval into ans
    - else if current interval overlaps with last interval in ans:
        - merge by updating end time
        - new_end = max(current_end, ans.back()[1])

  code_snippet: |
    for (auto interval : intervals) {
        if (ans.empty())
            ans.push_back(interval);
        else if (interval[0] > ans.back()[1])
            ans.push_back(interval);
        else
            ans.back()[1] = max(ans.back()[1], interval[1]);
    }

final_return:
  - return the list of merged intervals
  code_snippet: |
    return ans;

example_dry_run:
  input: [[1,3], [2,6], [8,10], [15,18]]
  sorted: [[1,3], [2,6], [8,10], [15,18]]
  steps:
    - [1,3] → ans = [[1,3]]
    - [2,6] overlaps → merge → ans = [[1,6]]
    - [8,10] no overlap → ans = [[1,6], [8,10]]
    - [15,18] no overlap → ans = [[1,6], [8,10], [15,18]]
  output: [[1,6], [8,10], [15,18]]

time_complexity:
  sorting: O(n log n)
  merge_loop: O(n)
  total: O(n log n)

space_complexity:
  worst_case: O(n) for answer list if no intervals overlap

why_this_works:
  - Sorting ensures overlapping intervals are adjacent
  - Greedy merge ensures only necessary intervals are merged
  - We maintain the latest end time seen so far to check overlaps

notes:
  - Works only if intervals are sorted by start time
  - Using `ans.back()` allows constant-time access to last merged interval

6)maxSumCombinations:
  purpose: >
    To find the k largest sum combinations from two arrays nums1 and nums2,
    where each sum is formed by adding one element from nums1 and one from nums2.

  key_idea:
    - Sort both arrays in descending order to prioritize larger elements first.
    - Use a max-heap (priority_queue) to always extract the next largest combination.
    - Avoid duplicates by using a set to track visited index pairs (i, j).
    - Push neighboring combinations of the current pair to explore all possible top combinations.

  why_insert_both_neighbors:
    reason_1: "We are interested in the top-k largest sums — not just the next immediate maximum."
    reason_2: >
      Even if (i+1, j) has a greater sum than (i, j+1) now,
      the path from (i, j+1) might lead to even larger combinations later.
      Ignoring it could miss some of the actual top-k combinations.
    reason_3: >
      Both directions (i+1, j) and (i, j+1) represent different combination paths.
      Only pushing one of them can miss combinations involving nums1[i] with later nums2[j+1],
      or nums2[j] with later nums1[i+1].
    reason_4: >
      The max-heap takes care of ordering and selecting the next largest sum,
      so it's safe and optimal to explore both neighbors and let the heap manage which one to pick next.

  role_of_set:
    purpose: "To prevent visiting the same (i, j) index pair multiple times."
    ensures:
      - No duplicate sums are pushed into the heap.
      - Memory and computation are saved.
      - Correctness: prevents redundant computation and infinite loop.
    inserted_when:
      - After pushing (i+1, j) into pq, insert (i+1, j) into the set.
      - After pushing (i, j+1) into pq, insert (i, j+1) into the set.

  heap_invariant:
    - The max-heap always stores the current best unseen combinations.
    - It ensures that at each step, the largest possible sum is picked greedily.
    - By pushing both neighbors, the algorithm maintains correctness and completeness.

  correctness:
    - The algorithm guarantees that the top-k combinations are extracted in non-increasing order.
    - No combination is revisited.
    - All necessary potential candidates are explored due to the neighbor insertions.

  time_and_space_complexity:
    time: "O(k * log k + n log n) — dominated by heap operations and initial sorting"
    space: "O(k) for heap and visited set"

  conclusion: >
    Always push both neighbors (i+1, j) and (i, j+1) if they are within bounds and not visited.
    This ensures that no potential top-k sum is missed, and that the heap has all possible candidates to work with.

7)Minimum Cost to Connect Sticks:
  problem_statement: >
    You are given an array `sticks`, where each element represents the length of a stick.
    You want to connect all the sticks into one stick.
    The cost of connecting two sticks is equal to the sum of their lengths.
    Your goal is to connect the sticks such that the **total cost is minimized**.

  key_observation: >
    Always connect the two shortest sticks first to minimize the cost.
    This is a greedy strategy similar to Huffman coding.

  why_min_heap:
    reason: >
      To always get the two smallest sticks in O(log n) time efficiently,
      we use a **priority queue (min-heap)**. The top element of a min-heap is the smallest.
    min_heap_behavior:
      - Insertion (push): O(log n)
      - Deletion (pop): O(log n)
      - Access minimum: O(1)

  approach:
    data_structure: min-heap (priority_queue with greater<int>)
    steps:
      - Step 1: Insert all stick lengths into the min-heap.
      - Step 2: While more than one stick remains:
          - Pop the two smallest sticks from the heap.
          - Compute their sum (cost of connecting them).
          - Add the cost to the answer.
          - Push the new stick (sum) back into the heap.
      - Step 3: Return the accumulated cost.

  dry_run_example:
    input: [2, 4, 3]
    heap_states:
      - Initial heap: [2, 4, 3]
      - Pop 2 and 3 → cost = 5 → heap: [4, 5]
      - Pop 4 and 5 → cost = 9 → heap: [9]
    total_cost: 5 + 9 = 14

  time_complexity:
    expression: O(n log n)
    explanation: >
      Each insertion and removal in the heap is O(log n),
      and you perform about n−1 such operations.

  space_complexity:
    expression: O(n)
    explanation: >
      The heap stores all n sticks in the worst case.

  code_snippet: |
        int connectSticks(vector<int>& sticks) {
            // Min-heap to always pick the two smallest sticks
            priority_queue<int, vector<int>, greater<int>> pq;
            // Push all stick lengths into the min-heap
            for (int stick : sticks) {
                pq.push(stick);
            }
            int totalCost = 0;
            // Keep combining the two smallest sticks until one stick remains
            while (pq.size() >= 2) {
                int a = pq.top(); pq.pop(); // Smallest stick
                int b = pq.top(); pq.pop(); // Second smallest stick
                int cost = a + b;
                totalCost += cost;
                pq.push(cost); // Insert the combined stick back
            }
            return totalCost;
        }
    };

8)Problem: Minimum Moves to Make All Array Elements Equal (by incrementing n-1 elements in each move)
Intuition:
  - After performing all the operations, every element in the array becomes equal to some final value `x`.
  - In one move, we can increase any `n-1` elements by 1. Hence, we are only allowed to increase elements — no decreasing is allowed.
  - For any element `a[i]`, the number of steps needed to become `x` is `x - a[i]`.
  - Therefore, the maximum of all `(x - a[i])` across the array will determine how many total moves we make.
  - Since x must be ≥ max(a), the effective number of moves becomes `x - min(a)`, because the smallest element needs the most increments.

Goal:
  - Find the minimum number of moves to make all elements equal, using the fact that only `n-1` elements can be incremented per move.

Approach:
  Step 1: Sum Increase Per Move
    - In each move, we increase `n - 1` elements by 1.
    - So the total sum of the array increases by `n - 1` after each move.

  Step 2: Number of Moves
    - Suppose we make `m` moves in total.
    - Let the smallest element in the array be `mini`.
    - We assume after all moves, every element becomes `x`, so:
        x = mini + m

  Step 3: Final and Initial Sum Relation
    - Let initial sum of array = `sum`
    - After m moves, total sum becomes:  
        sum + m * (n - 1)
    - But this must also equal `n * x`, because now all elements are `x`.

  Step 4: Form Equation and Solve
    Equation:
      n * x = sum + (x - mini) * (n - 1)
    Solve:
      Left side: n * x  
      Right side: sum + (x - mini)(n - 1)

    So: n * x - (x - mini)(n - 1) = sum
      => x [n - (n - 1)] + mini * (n - 1) = sum  
      => x + mini * (n - 1) = sum  
      => x = sum - mini * (n - 1)

  Step 5: Final Answer
    - We need to compute total number of moves, which is:
        x - mini = sum - mini * n

Code_Snippet_C++:
code: |
  int movesRequired(vector<int>& a) {
      int sum = accumulate(a.begin(), a.end(), 0);
      int mini = *min_element(a.begin(), a.end());
      int n = a.size();
      return sum - mini * n;
  }

9)Problem: Minimum Moves to Equal Array Elements II
Description:
  - You are given an array `nums` of size `n`.
  - In one move, you can increment or decrement any element by 1.
  - Each move costs 1 unit.
  - Goal: Find the minimum total number of moves to make all elements equal.

Intuition:
  - We aim to minimize the total cost defined as:
      sum(|nums[i] - x|) for some chosen target `x`.
  - This sum of absolute differences is minimized when `x` is the **median** of the array.

Approach_1: Prefix + Suffix Sum Method (User's Code)

Step-by-step:
  1. Sort the array `nums`.
  2. Compute prefix sums:
      - pf[i] = sum of first i+1 elements
  3. Compute suffix sums:
      - sf[i] = sum of elements from i to n-1
  4. For each index `i`, treat `nums[i]` as the target and compute:
      - left_cost = (i+1) * nums[i] - pf[i]
      - right_cost = sf[i] - (n-i) * nums[i]
      - total_cost = left_cost + right_cost
  5. Take the minimum over all such costs.

Time_Complexity: O(n log n)
Space_Complexity: O(n)

Code_Snippet_PrefixSuffix:
  code: |
    class Solution {
    public:
        int minMoves2(vector<int>& nums) {
            int n = nums.size();
            sort(nums.begin(), nums.end()); 
            vector<long long> pf(n), sf(n);
            pf[0] = nums[0];
            for(int i = 1; i < n; i++) {
                pf[i] = pf[i - 1] + nums[i];
            }
            sf[n - 1] = nums[n - 1];
            for(int i = n - 2; i >= 0; i--) {
                sf[i] = sf[i + 1] + nums[i];
            }
            long long ans = LLONG_MAX;
            for(int i = 0; i < n; i++) {
                long long left = (long long)(i + 1) * nums[i] - pf[i];
                long long right = sf[i] - (long long)(n - i) * nums[i];
                ans = min(ans, left + right);
            }
            return static_cast<int>(ans);
        }
    };

Approach_2: Median-Based Greedy Method (Optimal)
Concept:
  - The sum of absolute differences is minimized at the median of the array.
  - So, just compute the total cost of converting all elements to the median.

Steps:
  1. Sort the array.
  2. Choose the middle element as the median.
  3. Compute sum of absolute differences from the median.

Time_Complexity: O(n log n)
Space_Complexity: O(1)

Code_Snippet_Median:
  code: |
    class Solution {
    public:
        int minMoves2(vector<int>& nums) {
            sort(nums.begin(), nums.end());
            int median = nums[nums.size() / 2];
            int total = 0;
            for (int num : nums) {
                total += abs(num - median);
            }
            return total;
        }
    };
  
Comparison:
  - Prefix-Suffix Sum:
      - Detailed, more math-heavy, flexible for learning.
      - Useful if you want to compute cost for all targets.
  - Median-Based:
      - Shortest, most optimal in time and space.
      - Uses mathematical property of absolute sum minimization.

Final_Recommendation:
  - Use median-based method in production for simplicity and performance.
  - Keep prefix-suffix logic as a great way to understand cumulative cost computation.

10)Problem: Minimum Beans to Remove to Equalize Bags
Description:
  - You're given an array `beans[]` where each element represents the number of beans in a bag.
  - In one operation, you can remove **any number of beans** from any bag.
  - You must choose **one integer x ≥ 0**, and make all non-empty bags have exactly x beans.
  - Your goal is to **minimize the total number of beans removed**.

Intuition:
  - After sorting, for any index `i`, you can:
      - Remove **all beans in bags from index 0 to i-1** (i.e., make those bags empty).
      - Make all remaining bags (from i to n-1) have exactly `beans[i]` beans.
      - This means reducing all `beans[j]` where j ≥ i to `beans[i]`.

Approach: Prefix and Suffix Sum with Sorted Array

Steps:
  1. **Sort** the array to ensure increasing order.
  2. **Prefix Sum (pf)**:
      - `pf[i]` = total beans from index 0 to i
      - Helps in quickly calculating cost to remove all beans from bags `0` to `i-1`.
  3. **Suffix Sum (sf)**:
      - `sf[i]` = total beans from index i to n-1
      - Helps in calculating cost to reduce bags from `i` to `n-1` to `beans[i]`
  4. For each index `i`:
      - Set `beans[i]` as the target value.
      - Cost:
        - Remove all from 0 to i-1 → `pf[i-1]`
        - Reduce all from i to n-1 to `beans[i]` → `sf[i] - (n - i) * beans[i]`
      - Total cost = `pf[i-1] + sf[i] - (n - i) * beans[i]`
  5. Track the minimum total cost over all such `i`.

Edge_Case:
  - For `i = 0`, we never enter the loop, so we handle it outside:
    - Cost = remove all beans down to `beans[0]` → `sf[0] - n * beans[0]`

Time_Complexity: O(n log n)
  - Sorting: O(n log n)
  - Prefix/suffix + loop: O(n)

Space_Complexity: O(n)
  - For prefix and suffix arrays

Code_Snippet:
  code: |
    class Solution {
    public:
        typedef long long ll;
        long long minimumRemoval(vector<int>& beans) {
            int n = beans.size();
            sort(beans.begin(), beans.end());
            vector<ll> pf(n), sf(n); // prefix and suffix sums
            pf[0] = beans[0];
            for (int i = 1; i < n; i++) {
                pf[i] = pf[i - 1] + beans[i];
            }
            sf[n - 1] = beans[n - 1];
            for (int i = n - 2; i >= 0; i--) {
                sf[i] = sf[i + 1] + beans[i];
            }
            ll ans = LLONG_MAX;
            for (int i = 1; i < n; i++) {
                ll temp = pf[i - 1] + sf[i] - 1LL * (n - i) * beans[i];
                ans = min(ans, temp);
            }
            // Special case for i = 0 (all bags should have beans[0])
            ans = min(ans, sf[0] - 1LL * n * beans[0]);
            return ans;
        }
    };

Alternative_Optimal_Approach:
  - Instead of prefix/suffix, just use total sum:
    - total_sum = sum of all beans
    - For each i:
      - beans_kept = beans[i] * (n - i)
      - beans_removed = total_sum - beans_kept
  - This is faster and simpler with same time complexity.

11)Problem: Minimum Operations to Reduce x to Zero
Description:
  - You are given an array `nums` and an integer `x`.
  - You can remove elements from either **left end** or **right end** of the array.
  - The goal is to find the **minimum number of operations** (removals from either side) such that the **sum of removed elements = x**.
  - If not possible, return -1.

Intuition:
  - Removing from left = prefix sum
  - Removing from right = suffix sum
  - We want to remove elements from both ends such that the **total removed sum = x**
  - Equivalently, we want to **find a subarray in the middle** whose sum is equal to `total_sum - x` and **keep** it (so all other elements are removed).
  - But this implementation follows a different strategy:  
    **build prefix sums**, then **scan from right**, maintaining a suffix sum and checking if a corresponding prefix sum exists that complements the suffix to reach x.

Approach:

  Step 1: Preprocess Prefix Sum
    - Build a prefix sum array `pf[]` where:
        pf[i] = sum of nums[0] to nums[i]
    - Store all prefix sums and their **last occurring index** in a map `m`:
        m[pf[i]] = i

  Step 2: Initialize
    - Set `m[0] = -1` to handle the case where prefix sum starts from index 0.
    - `ans` is initialized to INT_MAX for tracking the minimum operations.

  Step 3: Check Direct Prefix Case
    - If there is a prefix sum directly equal to `x`:
        - The first `i+1` elements sum to `x`, so we may not need to take anything from the right.
        - Update `ans = m[x] + 1`

  Step 4: Iterate Backward to Build Suffix Sums
    - Start from the end of array.
    - For each index `j` from `n-1` to `0`:
        - Accumulate `sum` of suffix.
        - Compute `remaining = x - sum`
        - If `remaining` is present in prefix map `m` and `m[remaining] < j` (no overlap):
            - Total elements used = prefix length + suffix length = `m[remaining] + 1 + (n - j)`
            - Update `ans = min(ans, total)`

  Step 5: Final Result
    - If `ans` was updated, return it.
    - Otherwise, return -1.

Time_Complexity: O(n)
  - One pass for prefix sum
  - One backward pass for suffix sum
  - Constant-time lookups in map

Space_Complexity: O(n)
  - For prefix sum and hash map

Code_Snippet:
  code: |
    class Solution {
    public:
        int minOperations(vector<int>& nums, int x) {
            int n = nums.size();
            vector<int> pf(n);
            pf[0] = nums[0];
            for (int i = 1; i < n; i++) {
                pf[i] = pf[i - 1] + nums[i];
            }
            // Map to store prefix sums and their last index
            map<int, int> m;
            m[0] = -1; // to handle prefix sum equal to x from index 0
            for (int i = 0; i < n; i++) {
                m[pf[i]] = i;
            }
            int ans = INT_MAX;
            // Check if only prefix side is enough
            if (m.find(x) != m.end()) {
                ans = min(ans, m[x] + 1);
            }
            int sum = 0;
            for (int j = n - 1; j >= 0; j--) {
                sum += nums[j];
                int remain = x - sum;
                if (m.find(remain) != m.end() && m[remain] < j) {
                    ans = min(ans, m[remain] + 1 + (n - j));
                }
            }
            return (ans == INT_MAX ? -1 : ans);
        }
    };

Prefix_Sum_Only_Alternative:
  - If we consider only prefix sums (i.e., removing only from the left):
      - Just find smallest `i` such that `pf[i] == x`
      - This is already partially handled in the current code using:
          if (m.find(x) != m.end()) ans = m[x] + 1
  - It's optimal to combine both ends for flexibility, as in this full version.

12)Problem: Minimum Cost to Make Array Equal
Description:
  - You're given two arrays:
      - `nums[]`: the original values of elements
      - `cost[]`: cost per unit change for each corresponding `nums[i]`
  - You can change any `nums[i]` to any integer value.
  - The cost to change `nums[i]` to `x` is: `|nums[i] - x| * cost[i]`
  - Your task is to choose an integer `x` such that **total cost** to make **all nums[i] == x** is minimized.

Goal_Expression:
  - For a given index `i` with `nums[i] = x`, compute total cost to change all elements to `x`:
  - **Expression to minimize**:
    TotalCost(i) = Cost to make nums[0..i-1] = nums[i] (left)
                 + Cost to make nums[i+1..n-1] = nums[i] (right)
  - Let:
    - `v[i].first` = nums[i]
    - `v[i].second` = cost[i]

Prefix_Suffix_Sums_Usage:
  - Sort `(nums[i], cost[i])` by `nums[i]` to handle values in increasing order.
  
  - **Prefix Sums**:
    - `prefCost[i] = sum of cost[0..i]`
    - `prefWeighted[i] = sum of nums[j] * cost[j] for j = 0 to i`

  - **Suffix Info (via prefix)**:
    - Total cost: `prefCost[n-1]`
    - Total weighted: `prefWeighted[n-1]`

  - These help compute:
    - **LeftCost** (to increase elements before `i` to `nums[i]`):

      LeftCost = nums[i] * sum(cost[0..i-1]) - sum(nums[j]*cost[j] for j = 0 to i-1)
               = v[i].first * prefCost[i-1] - prefWeighted[i-1]

    - **RightCost** (to decrease elements after `i` to `nums[i]`):
      RightCost = sum(nums[j]*cost[j] for j = i+1 to n-1) - nums[i] * sum(cost[i+1..n-1])
                = (prefWeighted[n-1] - prefWeighted[i]) - v[i].first * (prefCost[n-1] - prefCost[i])

Time_Complexity: O(n log n)
  - Sorting: O(n log n)
  - Prefix sums + final loop: O(n)

Space_Complexity: O(n)
  - For prefix arrays

Code_Snippet:
  code: |
    class Solution {
    public:
        typedef long long ll;
        long long minCost(vector<int>& nums, vector<int>& cost) {
            int n = nums.size();
            vector<pair<ll, ll>> v(n); // store both nums[i] and cost[i] as ll
            for (int i = 0; i < n; i++) {
                v[i] = {static_cast<ll>(nums[i]), static_cast<ll>(cost[i])};
            }
            sort(v.begin(), v.end()); // sort by nums[i]
            // Build prefix sum of cost and weighted cost
            vector<ll> prefCost(n), prefWeighted(n);
            prefCost[0] = v[0].second;
            prefWeighted[0] = v[0].first * v[0].second;
            for (int i = 1; i < n; i++) {
                prefCost[i] = prefCost[i - 1] + v[i].second;
                prefWeighted[i] = prefWeighted[i - 1] + v[i].first * v[i].second;
            }
            ll total = prefCost[n - 1];
            ll ans = LLONG_MAX;
            for (int i = 0; i < n; i++) {
                ll leftCost = (i > 0) ? v[i].first * prefCost[i - 1] - prefWeighted[i - 1] : 0;
                ll rightCost = (i < n - 1) ? (prefWeighted[n - 1] - prefWeighted[i]) - v[i].first * (prefCost[n - 1] - prefCost[i]) : 0;
                ans = min(ans, leftCost + rightCost);
            }
            return ans;
        }
    };

Summary:
  - For each potential target `nums[i]`, use prefix and suffix sums to compute:
    - Cost to bring all previous elements up to `nums[i]`
    - Cost to bring all following elements down to `nums[i]`
  - Take the minimum across all possible targets.
  - This avoids computing absolute value differences directly and instead leverages efficient prefix summation.

13)Longest Consecutive Sequence:
  problem_statement: |
    Given an unsorted array of integers, find the length of the longest sequence 
    of consecutive integers. The sequence must consist of elements that appear 
    in the array and occur consecutively in numerical order. The order of the input 
    array does not matter.

    Example:
      Input: [100, 4, 200, 1, 3, 2]
      Output: 4
      Explanation: The longest consecutive sequence is [1, 2, 3, 4].

  code_snippet: |
    #include <bits/stdc++.h>
    using namespace std;
    typedef long long ll;
    int longestConsecutive(vector<ll>& nums) {
        set<ll> s;
        for (ll x : nums) s.insert(x); // Insert unique elements
        ll ans = 0;
        for (ll num : s) {
            // Consider only sequence starting points
            if (s.find(num - 1) == s.end()) {
                ll count = 0;
                ll temp = num;
                while (s.find(temp) != s.end()) {
                    count++;
                    temp++;
                }
                ans = max(ans, count);
            }
        }
        return ans;
    }

  approach:
    - Use a set to store all unique elements in the array.
    - Iterate through each unique number in the set.
    - For each number, check if it is the start of a new sequence.
    - A number is a start if there is no number before it (i.e., num - 1 is not in the set).
    - From each valid start point, count the length of the consecutive sequence by checking 
      for the presence of num + 1, num + 2, etc.
    - Track the maximum sequence length encountered during the process.

  key_logics:
    only_unique_values:
      description: |
        The sequence should be built only from unique elements. Duplicates don't extend the 
        length of a consecutive sequence. Hence, we use a `set` which stores only distinct values.
        This avoids recomputing the same sequences multiple times and simplifies lookups.
      structure_used: set
      benefit: |
        - Removes duplicates automatically
        - Allows O(log n) or O(1) average-time lookups
        - Guarantees each number is checked only once

    check_previous_number_absence:
      logic: |
        A number should be considered as the **start** of a sequence only if the number just 
        before it (num - 1) is NOT present in the set.
      reason: |
        - Prevents redundant counting of numbers already part of another sequence.
        - Ensures that each sequence is counted **only once**, starting from its smallest number.
        - Example: In [1, 2, 3, 4], only 1 qualifies as a start. Checking 2, 3, 4 as starts 
          would lead to repeated computation.

    count_consecutive_forward:
      logic: |
        Once a start of sequence is found (i.e., num - 1 is not in set), we incrementally check
        for num + 1, num + 2, ..., as long as those elements are present in the set.
      implementation: |
        - Use a loop that increases `temp` and checks `set.find(temp) != set.end()`
        - Maintain a `count` to record how many consecutive numbers are found
        - Update the `ans` (maximum length) accordingly

  complexity_analysis:
    time_complexity: |
      O(n log n) — where n is the size of input array
      - Inserting all elements into a `set` takes O(n log n)
      - Each number is processed at most once, and each lookup is O(log n)

    space_complexity: |
      O(n) — for storing all unique elements in the set

  optimization_note:
    better_data_structure: unordered_set
    benefit: |
      - Using `unordered_set` can reduce average lookup time to O(1)
      - That brings overall time complexity down to O(n) on average

  example_dry_run:
    input: [100, 4, 200, 1, 3, 2]
    set_built: [1, 2, 3, 4, 100, 200]
    sequence_detections:
      - num: 1
        is_start: true
        sequence: [1, 2, 3, 4]
        length: 4
      - num: 2
        is_start: false
        skipped: true
      - num: 3
        is_start: false
        skipped: true
      - num: 4
        is_start: false
        skipped: true
      - num: 100
        is_start: true
        sequence: [100]
        length: 1
      - num: 200
        is_start: true
        sequence: [200]
        length: 1
    output: 4

  conclusion: |
    The key to solving the longest consecutive sequence problem efficiently is to:
    - Avoid redundant work by identifying true sequence starting points
    - Use a hash set or ordered set to allow fast presence checking
    - Track the length of only those sequences that haven’t been processed before
    This leads to a clean, efficient solution with optimal time and space usage.

14)Problem Name: Maximum Distance in Arrays
Problem Statement:
  - You are given a list of arrays, where each array is sorted in increasing order.
  - You need to pick one element from one array and another element from a different array to maximize the absolute difference between these two elements.
  - Return the maximum such absolute difference.

Observation:
  - Since arrays are sorted:
      - The minimum value of any array will be at index 0 (first element).
      - The maximum value of any array will be at the last index (last element).

Goal:
  - Maximize |a - b| such that:
      - a is from one array, b is from another.
      - So the pair (min, max) should be from different arrays.

Brute Force Approach:
  - Compare each pair of arrays (O(n²)), calculate all possible differences using min of one and max of another.
  - This will TLE for large input.

Optimized Greedy Approach:
  - Since we only care about maximum and minimum across different arrays,
    we can:
      - Track the **overall smallest min** and **largest max** values,
      - But ensure they come from **different arrays**.
  - If max and min come from the same array, we look at second-best max or min.

Steps:
  1. For each array, store:
      - `mini[i] = {first element, index}`
      - `maxi[i] = {last element, index}`
  2. Sort both `mini` and `maxi` lists.
  3. Try to pick min and max from different indices:
      - If they are from different arrays → done.
      - If same → check next best option (second min or second max).

Greedy Logic:
  - Greedy works here because we only need the best global min and max — we only go to second-best if the best ones are from the same array.

Time Complexity:
  - O(n log n) for sorting min and max arrays.

Space Complexity:
  - O(n) for storing min and max pairs.

Code Snippet (Greedy with Sorting):
  ```cpp
  int maxDistance(vector<vector<int>>& arrays) {
      int n = arrays.size();
      vector<pair<int, int>> mini(n), maxi(n);
      for (int i = 0; i < n; i++) {
          mini[i] = {arrays[i][0], i};             // store min with array index
          maxi[i] = {arrays[i].back(), i};         // store max with array index
      }
      sort(mini.begin(), mini.end());             // sort by value
      sort(maxi.begin(), maxi.end());             // sort by value
      int s = 0, e = n - 1;
      while (s <= e) {
          if (mini[s].second != maxi[e].second) {
              return maxi[e].first - mini[s].first;
          } else {
              // Try skipping one of them if both belong to same array
              int a = maxi[e].first - mini[s + 1].first;
              int b = maxi[e - 1].first - mini[s].first;
              if (a <= b) e--;
              else s++;
          }
      }
      return 0;
  }
